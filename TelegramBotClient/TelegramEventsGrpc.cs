// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/telegramEvents.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TelegramBot.Proto {
  public static partial class TelegramEventService
  {
    static readonly string __ServiceName = "telegramEvents.TelegramEventService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::TelegramBot.Proto.Reminder> __Marshaller_telegramEvents_Reminder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TelegramBot.Proto.Reminder.Parser));
    static readonly grpc::Marshaller<global::TelegramBot.Proto.ReminderOperationResponse> __Marshaller_telegramEvents_ReminderOperationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TelegramBot.Proto.ReminderOperationResponse.Parser));
    static readonly grpc::Marshaller<global::TelegramBot.Proto.UserRequest> __Marshaller_telegramEvents_UserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TelegramBot.Proto.UserRequest.Parser));
    static readonly grpc::Marshaller<global::TelegramBot.Proto.UserResponse> __Marshaller_telegramEvents_UserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TelegramBot.Proto.UserResponse.Parser));

    static readonly grpc::Method<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse> __Method_AddReminder = new grpc::Method<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddReminder",
        __Marshaller_telegramEvents_Reminder,
        __Marshaller_telegramEvents_ReminderOperationResponse);

    static readonly grpc::Method<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse> __Method_RemoveReminder = new grpc::Method<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveReminder",
        __Marshaller_telegramEvents_Reminder,
        __Marshaller_telegramEvents_ReminderOperationResponse);

    static readonly grpc::Method<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse> __Method_ChangeReminder = new grpc::Method<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeReminder",
        __Marshaller_telegramEvents_Reminder,
        __Marshaller_telegramEvents_ReminderOperationResponse);

    static readonly grpc::Method<global::TelegramBot.Proto.UserRequest, global::TelegramBot.Proto.UserResponse> __Method_GetReminders = new grpc::Method<global::TelegramBot.Proto.UserRequest, global::TelegramBot.Proto.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReminders",
        __Marshaller_telegramEvents_UserRequest,
        __Marshaller_telegramEvents_UserResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TelegramBot.Proto.TelegramEventsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TelegramEventService</summary>
    [grpc::BindServiceMethod(typeof(TelegramEventService), "BindService")]
    public abstract partial class TelegramEventServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::TelegramBot.Proto.ReminderOperationResponse> AddReminder(global::TelegramBot.Proto.Reminder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TelegramBot.Proto.ReminderOperationResponse> RemoveReminder(global::TelegramBot.Proto.Reminder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TelegramBot.Proto.ReminderOperationResponse> ChangeReminder(global::TelegramBot.Proto.Reminder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TelegramBot.Proto.UserResponse> GetReminders(global::TelegramBot.Proto.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TelegramEventServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddReminder, serviceImpl.AddReminder)
          .AddMethod(__Method_RemoveReminder, serviceImpl.RemoveReminder)
          .AddMethod(__Method_ChangeReminder, serviceImpl.ChangeReminder)
          .AddMethod(__Method_GetReminders, serviceImpl.GetReminders).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TelegramEventServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddReminder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse>(serviceImpl.AddReminder));
      serviceBinder.AddMethod(__Method_RemoveReminder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse>(serviceImpl.RemoveReminder));
      serviceBinder.AddMethod(__Method_ChangeReminder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TelegramBot.Proto.Reminder, global::TelegramBot.Proto.ReminderOperationResponse>(serviceImpl.ChangeReminder));
      serviceBinder.AddMethod(__Method_GetReminders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TelegramBot.Proto.UserRequest, global::TelegramBot.Proto.UserResponse>(serviceImpl.GetReminders));
    }

  }
}
#endregion
